{"version":3,"sources":["components/Wrapper.js","components/EntryList.js","components/FormBar.js","App.js","serviceWorker.js","index.js"],"names":["Wrapper","props","className","children","EntryList","onClick","deleteUser","id","src","style","width","visibility","marginLeft","alt","firstName","lastName","FormBar","useState","currentUser","setCurrentUser","usersData","setUsersData","show","setShow","handleInputChange","event","target","name","value","saveToList","trim","uuidv4","console","log","deleteArray","filter","user","FormGroup","Label","hidden","for","Input","padding","margin","onChange","type","placeholder","Button","preventDefault","alert","Array","isArray","i","length","find","Modal","Header","Title","Body","Footer","Jumbotron","map","key","indexOf","App","Container","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"0TAOeA,MAJf,SAAiBC,GACb,OAAO,yBAAKC,UAAU,WAAWD,EAAME,WCuB5BC,EAzBG,SAACH,GAEf,OACI,oCACI,yBAAKC,UAAU,QACX,yBAAKA,UAAU,yBACX,yBACIA,UAAU,2BACVG,QAAS,kBAAMJ,EAAMK,WAAWL,EAAMM,MAF1C,WAOJ,yBAAKL,UAAU,kBAAkBM,IAAI,sFAAsFC,MAAO,CAAEC,MAAO,SAAUC,WAAY,UAAWC,WAAY,UAAYC,IAAI,KACxM,yBAAKX,UAAU,WACX,sCACQD,EAAMa,UADd,YAC2Bb,EAAMc,eCoJtCC,EA7JC,WAAO,IAAD,EAGoBC,mBAAS,CAC3CH,UAAW,GACXC,SAAU,KALI,mBAGXG,EAHW,KAGEC,EAHF,KAQVL,EAAwBI,EAAxBJ,UAAWC,EAAaG,EAAbH,SARD,EASgBE,mBAAS,IATzB,mBASXG,EATW,KASAC,EATA,OAWMJ,oBAAS,GAXf,mBAWXK,EAXW,KAWLC,EAXK,KA2BZC,EAAoB,SAAAC,GAAU,IAAD,EACPA,EAAMC,OAAtBC,EADuB,EACvBA,KAAMC,EADiB,EACjBA,MACdT,EAAe,2BAAKD,GAAN,kBAAoBS,EAAOC,MA+BvCC,EAAa,WAEfR,EAAa,GAAD,mBAAKD,GAAL,CACZ,CACIN,UAAWA,EAAUgB,OACrBf,SAAUA,EAASe,OACnBvB,GAVWwB,kBAcfZ,EAAe,CACXL,UAAW,GACXC,SAAU,MAIZT,EAAa,SAAAC,GACfyB,QAAQC,IAAI1B,GACZ,IAAM2B,EAAcd,EAAUe,QAAO,SAAAC,GAAI,OAAIA,EAAK7B,KAAOA,KACzDc,EAAaa,IAGjB,OACI,oCACI,kBAAC,EAAD,CAAShC,UAAU,SACf,8CACA,kBAACmC,EAAA,EAAD,CAAW5B,MAAO,CAAEC,MAAO,MACvB,kBAAC4B,EAAA,EAAD,CAAOC,QAAM,EAACC,IAAI,aAAlB,cACA,kBAACC,EAAA,EAAD,CAAOhC,MAAO,CAAEiC,QAAS,GAAIC,OAAQ,GACjCf,MAAOd,EACPa,KAAK,YACLiB,SAAUpB,EACVqB,KAAK,OACLtC,GAAG,YACHuC,YAAY,wBAEhB,kBAACR,EAAA,EAAD,CAAOC,QAAM,EAACC,IAAI,YAAlB,aACA,kBAACC,EAAA,EAAD,CAAOhC,MAAO,CAAEiC,QAAS,GAAIC,OAAQ,GACjCf,MAAOb,EACPY,KAAK,WACLiB,SAAUpB,EACVqB,KAAK,OACLtC,GAAG,WACHuC,YAAY,uBAEhB,kBAACC,EAAA,EAAD,CAAQtC,MAAO,CAAEiC,QAAS,GAAIC,OAAQ,GAClCzC,UAAU,kBACVG,QA3EK,SAAAoB,GAErB,GADAA,EAAMuB,kBACDlC,IAAcC,EAKf,OAJAI,EAAe,CACXL,UAAW,GACXC,SAAU,KAEPkC,MAAM,6CAGjB,GAAIC,MAAMC,QAAQ/B,GAAY,CAE1B,IAAK,IAAIgC,EAAI,EAAGA,EAAIhC,EAAUiC,OAAQD,IAClC,GAAIhC,EAAUkC,MAAK,SAAAlB,GAAI,OAAIA,EAAKtB,YAAcA,EAAUgB,QAAUM,EAAKrB,WAAaA,EAASe,UACzF,OAjCSP,GAAQ,GAoCzBM,OAwDQ,WAOJ,kBAAC0B,EAAA,EAAD,CAAOjC,KAAMA,GACT,kBAACiC,EAAA,EAAMC,OAAP,KACI,kBAACD,EAAA,EAAME,MAAP,KAAa,uBAAGhD,MAAO,CAAEC,MAAO,IAAMR,UAAU,gCAEpD,kBAACqD,EAAA,EAAMG,KAAP,KACI,gDACsB5C,EADtB,IACkCC,EADlC,kDAIJ,kBAACwC,EAAA,EAAMI,OAAP,KACI,kBAACZ,EAAA,EAAD,CAAQ7C,UAAU,2BAA2BG,QA3G/C,WACdwB,IACAN,GAAQ,KAyGQ,OAGA,kBAACwB,EAAA,EAAD,CAAQ7C,UAAU,4BAA4BG,QA1G7C,WACjBkB,GAAQ,GACRJ,EAAe,CACXL,UAAW,GACXC,SAAU,OAsGE,aAMZ,kBAAC6C,EAAA,EAAD,CAAW1D,UAAU,SACjB,6CACA,6BACCkB,EAAUiC,OAEP,yBAAKnD,UAAU,kCACVkB,EAAUyC,KAAI,SAAAzB,GAAI,OACf,kBAAC,EAAD,CACI0B,IAAK1C,EAAU2C,QAAQ3B,GACvBtB,UAAWsB,EAAKtB,UAChBC,SAAUqB,EAAKrB,SACfR,GAAI6B,EAAK7B,GACTD,WAAYA,QAMpB,QChJT0D,MATf,WACE,OACE,kBAACC,EAAA,EAAD,KACE,6BACA,kBAAC,EAAD,QCGcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnD,QAAQmD,MAAMA,EAAMC,c","file":"static/js/main.46127155.chunk.js","sourcesContent":["import React from \"react\";\n\n\nfunction Wrapper(props) {\n    return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;\n\n","import React from \"react\";\n\nconst EntryList = (props) => {\n\n    return (\n        <>\n            <div className=\"item\">\n                <div className=\"right floated content\">\n                    <div\n                        className=\"ui inverted green button\"\n                        onClick={() => props.deleteUser(props.id)}\n                    >\n                        Delete\n                    </div>\n                </div>\n                <img className=\"ui avatar image\" src=\"https://res.cloudinary.com/dddtjci2s/image/upload/v1589579232/check_mark_cze4om.png\" style={{ width: \"1.5rem\", visibility: \"visible\", marginLeft: \"0.5rem\" }} alt=\"\" />\n                <div className=\"content\">\n                    <h4>\n                        {`${props.firstName} ${props.lastName}`}\n                    </h4>\n                </div>\n            </div>\n\n        </>\n    )\n}\n\nexport default EntryList;","import React, { useState } from \"react\";\nimport { v4 as uuidv4 } from 'uuid';\nimport { FormGroup, Label, Input, Button, Jumbotron } from \"reactstrap\";\nimport Modal from 'react-bootstrap/Modal';\n\nimport Wrapper from \"./Wrapper\";\nimport EntryList from \"./EntryList\";\n\n\nconst FormBar = () => {\n\n\n    const [currentUser, setCurrentUser] = useState({\n        firstName: \"\",\n        lastName: \"\",\n    });\n\n    const { firstName, lastName } = currentUser;\n    const [usersData, setUsersData] = useState([]);\n\n    const [show, setShow] = useState(false);\n\n    const handleShow = () => setShow(true);\n\n    const handleAdd = () => {\n        saveToList();\n        setShow(false);\n    };\n    const handleDelete = () => {\n        setShow(false);\n        setCurrentUser({\n            firstName: \"\",\n            lastName: \"\"\n        })\n    }\n\n    const handleInputChange = event => {\n        const { name, value } = event.target;\n        setCurrentUser({ ...currentUser, [name]: value });\n    };\n\n    const handleFormSubmit = event => {\n        event.preventDefault();\n        if (!firstName || !lastName) {\n            setCurrentUser({\n                firstName: \"\",\n                lastName: \"\"\n            })\n            return alert(\"Fill out your First and Last name please!\");\n        }\n\n        if (Array.isArray(usersData)) {\n\n            for (var i = 0; i < usersData.length; i++) {\n                if (usersData.find(user => user.firstName === firstName.trim() && user.lastName === lastName.trim())) {\n                    return handleShow();\n                }\n            }\n            saveToList();\n        }\n        // console.log(usersData)\n\n    };\n\n    const createId = () => {\n        var uniqueId = uuidv4();\n        return uniqueId;\n\n    };\n    const saveToList = () => {\n\n        setUsersData([...usersData,\n        {\n            firstName: firstName.trim(),\n            lastName: lastName.trim(),\n            id: createId()\n        }\n        ]);\n\n        setCurrentUser({\n            firstName: \"\",\n            lastName: \"\"\n        })\n    };\n\n    const deleteUser = id => {\n        console.log(id)\n        const deleteArray = usersData.filter(user => user.id !== id);\n        setUsersData(deleteArray);\n    }\n\n    return (\n        <>\n            <Wrapper className=\"mt-n1\">\n                <h1>Customer entry</h1>\n                <FormGroup style={{ width: 350 }}>\n                    <Label hidden for=\"firstName\">First Name</Label>\n                    <Input style={{ padding: 10, margin: 5 }}\n                        value={firstName}\n                        name=\"firstName\"\n                        onChange={handleInputChange}\n                        type=\"text\"\n                        id=\"firstName\"\n                        placeholder=\"Enter First Name...\"\n                    />\n                    <Label hidden for=\"lastName\">Last Name</Label>\n                    <Input style={{ padding: 10, margin: 5 }}\n                        value={lastName}\n                        name=\"lastName\"\n                        onChange={handleInputChange}\n                        type=\"text\"\n                        id=\"lastName\"\n                        placeholder=\"Enter Last Name...\"\n                    />\n                    <Button style={{ padding: 10, margin: 5 }}\n                        className=\"ui green button\"\n                        onClick={handleFormSubmit}\n                    >\n                        Submit\n                    </Button>\n                </FormGroup>\n                <Modal show={show} >\n                    <Modal.Header >\n                        <Modal.Title><i style={{ width: 40 }} className=\"exclamation triangle icon\"></i></Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body>\n                        <h4>\n                            You already have {firstName} {lastName} in the list, would you like to add it again?\n                        </h4>\n                    </Modal.Body>\n                    <Modal.Footer>\n                        <Button className=\"ui inverted green button\" onClick={handleAdd}>\n                            Add\n                             </Button>\n                        <Button className=\"ui inverted orange button\" onClick={handleDelete}>\n                            Delete\n                             </Button>\n                    </Modal.Footer>\n                </Modal>\n            </Wrapper>\n            <Jumbotron className=\"mt-n1\">\n                <h2>New Customers</h2>\n                <hr></hr>\n                {usersData.length ? (\n\n                    <div className=\"ui middle aligned divided list\">\n                        {usersData.map(user => (\n                            <EntryList\n                                key={usersData.indexOf(user)}\n                                firstName={user.firstName}\n                                lastName={user.lastName}\n                                id={user.id}\n                                deleteUser={deleteUser}\n\n                            />\n                        ))}\n                    </div>\n                ) : (\n                        null\n                    )}\n\n            </Jumbotron>\n        </>\n    )\n}\n\nexport default FormBar;","import React from 'react';\nimport { Container } from \"reactstrap\";\n\nimport FormBar from \"./components/FormBar\";\n\nfunction App() {\n  return (\n    <Container>\n      <br></br>\n      <FormBar />\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}